/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package INTERFAZ;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import Clases.ArbolBinarioAVL;
import Clases.Comprimir;
import Clases.Descomprimir;
import Clases.ImagenGrafica;

/**
 *
 * @author VICTUS
 */
public class ArbolBusquedaAVL extends javax.swing.JFrame {

    ArbolBinarioAVL avl = new ArbolBinarioAVL();

    public ArbolBusquedaAVL() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jBtnCargarA = new javax.swing.JButton();
        jBtnArcPersonalizado = new javax.swing.JButton();
        jBtnGuardarArc = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTNodos = new javax.swing.JTable();
        jBtnInOrden = new javax.swing.JButton();
        jBtnPreOrden = new javax.swing.JButton();
        jBtnPostOrden = new javax.swing.JButton();
        jBtnIngresar = new javax.swing.JButton();
        jBtnBuscar = new javax.swing.JButton();
        jBtnActualizar = new javax.swing.JButton();
        jBtnEliminar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        Tiempo = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMImagenG = new javax.swing.JMenuItem();
        jMEncrypt = new javax.swing.JMenuItem();
        Decrypt = new javax.swing.JMenuItem();
        Comprimir = new javax.swing.JMenuItem();
        Descomprimir = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMSalir = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMRegresar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Showcard Gothic", 0, 36)); // NOI18N
        jLabel1.setText("ARBOL BINARIO DE BUSQUEDA AVL");
        jLabel1.setToolTipText("");

        jBtnCargarA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/cargarA.png"))); // NOI18N
        jBtnCargarA.setText("Cargar Archivo");
        jBtnCargarA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCargarAActionPerformed(evt);
            }
        });

        jBtnArcPersonalizado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/icons8-agregar-archivo-30.png"))); // NOI18N
        jBtnArcPersonalizado.setText("Cargar Arc. Personalizado");
        jBtnArcPersonalizado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnArcPersonalizadoActionPerformed(evt);
            }
        });

        jBtnGuardarArc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/icons8-guardar-30 (1).png"))); // NOI18N
        jBtnGuardarArc.setText("Guardar Documento");
        jBtnGuardarArc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGuardarArcActionPerformed(evt);
            }
        });

        jTNodos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "DPI", "Depatamento", "Municipio", "Lugar V.", "No. Dosis", "Dosis 1", "Dosis 2", "Dosis 3"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTNodos);

        jBtnInOrden.setText("InOrden");
        jBtnInOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnInOrdenActionPerformed(evt);
            }
        });

        jBtnPreOrden.setText("PreOrden");
        jBtnPreOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnPreOrdenActionPerformed(evt);
            }
        });

        jBtnPostOrden.setText("PostOrden");
        jBtnPostOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnPostOrdenActionPerformed(evt);
            }
        });

        jBtnIngresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/Ingresar.png"))); // NOI18N
        jBtnIngresar.setText("Ingresar");
        jBtnIngresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnIngresarActionPerformed(evt);
            }
        });

        jBtnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/buscar.png"))); // NOI18N
        jBtnBuscar.setText("Buscar");
        jBtnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBuscarActionPerformed(evt);
            }
        });

        jBtnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/actualizar.png"))); // NOI18N
        jBtnActualizar.setText("Actualizar");
        jBtnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnActualizarActionPerformed(evt);
            }
        });

        jBtnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/eliminar.png"))); // NOI18N
        jBtnEliminar.setText("Eliminar");
        jBtnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEliminarActionPerformed(evt);
            }
        });

        jLabel3.setText("Tiempo:");

        Tiempo.setText(".");

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/menu.png"))); // NOI18N
        jMenu1.setText("Menu");

        jMImagenG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/abb.png"))); // NOI18N
        jMImagenG.setText("GENERAR IMAGEN");
        jMImagenG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMImagenGActionPerformed(evt);
            }
        });
        jMenu1.add(jMImagenG);

        jMEncrypt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/icons8-criptografía-externa-criptografía-relleno-suave-relleno-suave-pez-jugoso-17.png"))); // NOI18N
        jMEncrypt.setText("ENCRIPTAR");
        jMEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMEncryptActionPerformed(evt);
            }
        });
        jMenu1.add(jMEncrypt);

        Decrypt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/icons8-cryptography-17.png"))); // NOI18N
        Decrypt.setText("DESECRIPTAR");
        Decrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecryptActionPerformed(evt);
            }
        });
        jMenu1.add(Decrypt);

        Comprimir.setText("COMPRIMIR");
        Comprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComprimirActionPerformed(evt);
            }
        });
        jMenu1.add(Comprimir);

        Descomprimir.setText("DESCOMPRIMIR");
        Descomprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DescomprimirActionPerformed(evt);
            }
        });
        jMenu1.add(Descomprimir);

        jMenuBar1.add(jMenu1);

        jMenu2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/cerrar.png"))); // NOI18N
        jMenu2.setText("Cerrar");

        jMSalir.setText("Salir");
        jMSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMSalirActionPerformed(evt);
            }
        });
        jMenu2.add(jMSalir);

        jMenuBar1.add(jMenu2);

        jMenu3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/regresar.png"))); // NOI18N
        jMenu3.setText("Regresar");

        jMRegresar.setText("Regresar");
        jMRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMRegresarActionPerformed(evt);
            }
        });
        jMenu3.add(jMRegresar);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1093, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(227, 227, 227))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(208, 208, 208)
                        .addComponent(jBtnIngresar)
                        .addGap(81, 81, 81)
                        .addComponent(jBtnBuscar)
                        .addGap(93, 93, 93)
                        .addComponent(jBtnActualizar)
                        .addGap(89, 89, 89)
                        .addComponent(jBtnEliminar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(248, 248, 248)
                        .addComponent(jBtnPreOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(146, 146, 146)
                        .addComponent(jBtnInOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(151, 151, 151)
                        .addComponent(jBtnPostOrden))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jBtnCargarA)
                        .addGap(31, 31, 31)
                        .addComponent(jBtnArcPersonalizado)
                        .addGap(18, 18, 18)
                        .addComponent(jBtnGuardarArc, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(137, 137, 137)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Tiempo, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jBtnCargarA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jBtnArcPersonalizado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jBtnGuardarArc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(Tiempo))
                                .addGap(27, 27, 27)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(104, 104, 104))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBtnPreOrden)
                            .addComponent(jBtnInOrden)
                            .addComponent(jBtnPostOrden))
                        .addGap(54, 54, 54)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBtnActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBtnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(84, 84, 84))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMRegresarActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jMRegresarActionPerformed

    private void jMSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMSalirActionPerformed
        // TODO add your handling code here:
        int confirmado = JOptionPane.showConfirmDialog(null, "Está seguro de Salir");
        if (JOptionPane.OK_OPTION == confirmado) {
            System.exit(0);
        }
    }//GEN-LAST:event_jMSalirActionPerformed

    private static String[] separarDatosArchivo(String linea) {
        // Expresión regular para separar el nombre del DPI
        Pattern pattern = Pattern.compile("(.+?)\\s+(\\d+)");
        Matcher matcher = pattern.matcher(linea);
        if (matcher.matches()) {
            String nombre = matcher.group(1).trim();
            String dpi = matcher.group(2).trim();
            return new String[]{nombre, dpi};
        }
        return null;
    }

    private void jBtnCargarAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCargarAActionPerformed
        JFileChooser escogerArchivo = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Texto (.txt)", "txt");
        escogerArchivo.setFileFilter(filtro);
        int valorRetornado = escogerArchivo.showOpenDialog(null);

        if (valorRetornado == JFileChooser.APPROVE_OPTION) {
            File archivoSeleccionado = escogerArchivo.getSelectedFile();
            String[] options = {"SI", "NO"};
            int option = JOptionPane.showOptionDialog(null, "¿QUIERES CARGAR TODOS LOS DATOS?", "Selección de Ingreso",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
            int cantidad = 0;
            boolean validInput = false;

            // Validación solo números y no texto
            if (option == 1) { // El índice 1 ahora corresponde a "NO"
                while (!validInput) {
                    try {
                        String input = JOptionPane.showInputDialog(null, "¿Cuántos datos quieres cargar?", "Ingreso", JOptionPane.QUESTION_MESSAGE);
                        if (input == null) {
                            return;
                        }
                        cantidad = Integer.parseInt(input);
                        validInput = true;
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(null, "Por favor, ingrese un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }

            try (BufferedReader br = new BufferedReader(new FileReader(archivoSeleccionado))) {
                String linea;
                StringBuilder txtarea = new StringBuilder();
                int contador = 0;
                while ((linea = br.readLine()) != null) {
                    if (option == 1 && contador >= cantidad) {
                        break;
                    }
                    String[] partes = separarDatosArchivo(linea);
                    if (partes != null) {
                        String nombre = partes[0];
                        long dpi = Long.parseLong(partes[1]);
                        // Ingreso como tal
                        avl.insertarAlArbol(nombre, dpi); // Solo se agrega nombre y DPI
                        contador++;
                    }
                }

                JOptionPane.showMessageDialog(null, "Datos cargados correctamente en el árbol.");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jBtnCargarAActionPerformed

    private void jBtnInOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnInOrdenActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTNodos.getModel();
        model.setRowCount(0);

        if (!avl.estaVacio()) {
            avl.InOrden(avl.raiz, model);

        } else {
            JOptionPane.showMessageDialog(null, "El arbol esta vacio");
        }
    }//GEN-LAST:event_jBtnInOrdenActionPerformed

    private void jBtnPreOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnPreOrdenActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTNodos.getModel();
        model.setRowCount(0);

        if (!avl.estaVacio()) {
            avl.PreOrden(avl.raiz, model);

        } else {
            JOptionPane.showMessageDialog(null, "El arbol esta vacio");
        }
    }//GEN-LAST:event_jBtnPreOrdenActionPerformed

    private void jBtnPostOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnPostOrdenActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTNodos.getModel();
        model.setRowCount(0);

        if (!avl.estaVacio()) {
            avl.PostOrden(avl.raiz, model);

        } else {
            JOptionPane.showMessageDialog(null, "El arbol esta vacio");
        }
    }//GEN-LAST:event_jBtnPostOrdenActionPerformed

    private void jBtnGuardarArcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGuardarArcActionPerformed
        if (!avl.estaVacio()) {
            int confirmado = JOptionPane.showConfirmDialog(null, "Está seguro de guardar el arbol");
            if (JOptionPane.OK_OPTION == confirmado) {
                try (BufferedWriter writer = new BufferedWriter(new FileWriter("ArbolBinarioAVL.txt"))) {
                    String guardado = avl.guardarPreOrdenTXT(avl.raiz);
                    writer.write(guardado);
                    JOptionPane.showMessageDialog(null, "Archivo Guardado Correctamente en la carpeta del proyecto");
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "El arbol esta vacio");
        }
    }//GEN-LAST:event_jBtnGuardarArcActionPerformed

    private static String[] separarDatosArchivoPersonalizado(String linea) {
        // Expresión regular para separar los datos
        Pattern pattern = Pattern.compile("(.+?)\\|([0-9]+)\\|(.+?)\\|(.+?)\\|(.+?)\\|([0-9]+)\\|(.+?)\\|(.+?)\\|(.+)");
        Matcher matcher = pattern.matcher(linea);
        if (matcher.matches()) {
            String[] datos = new String[9];
            for (int i = 0; i < 9; i++) {
                datos[i] = matcher.group(i + 1).trim();
            }
            return datos;
        }
        return null;
    }

    private void jBtnArcPersonalizadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnArcPersonalizadoActionPerformed
        JFileChooser escogerArchivo = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Texto (.txt)", "txt");
        escogerArchivo.setFileFilter(filtro);
        int valorRetornado = escogerArchivo.showOpenDialog(null);

        if (valorRetornado == JFileChooser.APPROVE_OPTION) {
            File archivoSeleccionado = escogerArchivo.getSelectedFile();
            String[] options = {"SI", "NO"};
            int option = JOptionPane.showOptionDialog(null, "¿QUIERES CARGAR TODOS LOS DATOS?", "Selección de Ingreso",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
            int cantidad = 0;
            boolean validInput = false;

            // Validación solo números y no texto
            if (option == 1) { // El índice 1 ahora corresponde a "NO"
                while (!validInput) {
                    try {
                        String input = JOptionPane.showInputDialog(null, "¿Cuántos datos quieres cargar?", "Ingreso", JOptionPane.QUESTION_MESSAGE);
                        if (input == null) {
                            return;
                        }
                        cantidad = Integer.parseInt(input);
                        validInput = true;
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(null, "Por favor, ingrese un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }

            try (BufferedReader br = new BufferedReader(new FileReader(archivoSeleccionado))) {
                String linea;
                int contador = 0;
                while ((linea = br.readLine()) != null) {
                    if (option == 1 && contador >= cantidad) {
                        break;
                    }
                    String[] partes = separarDatosArchivoPersonalizado(linea);
                    if (partes != null) {
                        String nombre = partes[0];
                        long dpi = Long.parseLong(partes[1]);
                        String departamento = partes[2];
                        String municipio = partes[3];
                        String lugarVacunacion = partes[4];
                        int cantidadDosis = Integer.parseInt(partes[5]);
                        String fechaVacuna1 = partes[6];
                        String fechaVacuna2 = partes[7];
                        String fechaVacuna3 = partes[8];

                        avl.insertarAlArbol(nombre, dpi);
                        avl.actualizarDatos(dpi, nombre, departamento, municipio, lugarVacunacion, cantidadDosis, fechaVacuna1, fechaVacuna2, fechaVacuna3);

                        contador++;
                    }
                }
                JOptionPane.showMessageDialog(null, "Datos cargados correctamente en el árbol.");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jBtnArcPersonalizadoActionPerformed

    private void jBtnIngresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnIngresarActionPerformed
        AgregarDatosAVL ag = new AgregarDatosAVL();
        ag.setVisible(true);
    }//GEN-LAST:event_jBtnIngresarActionPerformed

    private void jBtnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBuscarActionPerformed
        try {

            if (!avl.estaVacio()) {
                long dpi = Long.parseLong(JOptionPane.showInputDialog("Ingrese el DPI del nodo a buscar:"));
                DefaultTableModel model = (DefaultTableModel) jTNodos.getModel();
                model.setRowCount(0);
                long startTime = System.nanoTime();
                boolean encontrado = avl.MostrarNodoBuscado(dpi, model);
                long endTime = System.nanoTime();
                long duration = (endTime - startTime); // duración en nanosegundos
                double duracion = duration / 1_000_000_000.0; // convertir a segundos
                if (encontrado) {
                    Tiempo.setText(String.valueOf(duracion) + " s");
                    JOptionPane.showMessageDialog(null, "Nodo encontrado");
                } else {
                    JOptionPane.showMessageDialog(null, "Nodo no encontrado");
                }

            } else {
                JOptionPane.showMessageDialog(null, "El arbol esta vacio");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "DPI a buscar invalido");
        }
    }//GEN-LAST:event_jBtnBuscarActionPerformed

    private void jBtnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnActualizarActionPerformed
        ActualizarDatosAVL agAVL = new ActualizarDatosAVL();
        agAVL.setVisible(true);
    }//GEN-LAST:event_jBtnActualizarActionPerformed

    private void jBtnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEliminarActionPerformed
        try {
            long numero;
            if (!avl.estaVacio()) {
                numero = Long.parseLong(JOptionPane.showInputDialog(null, "Ingresa el Numero de DPI del registro a eliminar", "Eliminando un Nodo", JOptionPane.QUESTION_MESSAGE));
                if (avl.eliminacion(numero) == false) {
                    JOptionPane.showMessageDialog(null, "El Nodo a Eliminar no se encuentra en el Arbol", "Nodo no Encontrado", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "El Nodo ha sido eliminado del Arbol", "Nodo Eliminado", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "El Arbol esta vacio", "Error", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Nodo a eliminar invalido");
        }
    }//GEN-LAST:event_jBtnEliminarActionPerformed

    private void jMEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMEncryptActionPerformed
        if (!avl.estaVacio()) {
            int opcion = JOptionPane.showConfirmDialog(null, "Se ecriptaran los datos", "Confirmar", JOptionPane.YES_NO_OPTION);
            if (opcion == JOptionPane.YES_OPTION) {
                avl.encryptRegistro(avl.raiz, 5);
                JOptionPane.showMessageDialog(null, "Proceso Completado");

            }
        } else {
            JOptionPane.showMessageDialog(null, "El arbol esta vacio");
        }
    }//GEN-LAST:event_jMEncryptActionPerformed

    private void DecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecryptActionPerformed
        if (!avl.estaVacio()) {
            int opcion = JOptionPane.showConfirmDialog(null, "Se decriptaran los datos", "Confirmar", JOptionPane.YES_NO_OPTION);
            if (opcion == JOptionPane.YES_OPTION) {
                avl.decryptRegistro(avl.raiz, 5);
                JOptionPane.showMessageDialog(null, "Proceso Completado");

            }
        } else {
            JOptionPane.showMessageDialog(null, "El arbol esta vacio");
        }
    }//GEN-LAST:event_DecryptActionPerformed

    private void jMImagenGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMImagenGActionPerformed
        ImagenGrafica MiLienzo = new ImagenGrafica();
        MiLienzo.setArbolAVL(avl);

        JFrame ventana = new JFrame();
        ventana.getContentPane().add(MiLienzo);
        ventana.setSize(800, 600);
        ventana.setVisible(true);
    }//GEN-LAST:event_jMImagenGActionPerformed

    private void ComprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComprimirActionPerformed
         Comprimir com = new Comprimir();
         String nombre = "ArbolBinario.txt";
         com.comprimirArchivo(nombre);
         JOptionPane.showMessageDialog(null, "Compresion Exitosa", "Descompresion", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_ComprimirActionPerformed

    private void DescomprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DescomprimirActionPerformed
       Descomprimir des = new Descomprimir();
      String nombre = "ArbolBinario.txt";
      des.descomprimirArchivo(nombre);
      JOptionPane.showMessageDialog(null, "Descompresion Exitosa", "Descompresion", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_DescomprimirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArbolBusquedaAVL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArbolBusquedaAVL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArbolBusquedaAVL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArbolBusquedaAVL.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ArbolBusquedaAVL().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Comprimir;
    private javax.swing.JMenuItem Decrypt;
    private javax.swing.JMenuItem Descomprimir;
    private javax.swing.JLabel Tiempo;
    private javax.swing.JButton jBtnActualizar;
    private javax.swing.JButton jBtnArcPersonalizado;
    private javax.swing.JButton jBtnBuscar;
    private javax.swing.JButton jBtnCargarA;
    private javax.swing.JButton jBtnEliminar;
    private javax.swing.JButton jBtnGuardarArc;
    private javax.swing.JButton jBtnInOrden;
    private javax.swing.JButton jBtnIngresar;
    private javax.swing.JButton jBtnPostOrden;
    private javax.swing.JButton jBtnPreOrden;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuItem jMEncrypt;
    private javax.swing.JMenuItem jMImagenG;
    private javax.swing.JMenuItem jMRegresar;
    private javax.swing.JMenuItem jMSalir;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTNodos;
    // End of variables declaration//GEN-END:variables
}
