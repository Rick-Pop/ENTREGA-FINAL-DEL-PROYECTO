/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package INTERFAZ;

import java.awt.Image;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import prueba3.ArbolBinario;
import prueba3.NodoArbol;

/**
 *
 * @author VICTUS
 */
public class ArbolBusqueda extends javax.swing.JFrame {

    ArbolBinario arbolbb = new ArbolBinario();

    public ArbolBusqueda() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        imgBBT = new javax.swing.JLabel();
        Abrir = new javax.swing.JButton();
        Guardar = new javax.swing.JButton();
        inOrdBBT = new javax.swing.JButton();
        preOrdBBT = new javax.swing.JButton();
        postBBT = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        BtnIngresar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jBtnActualizar = new javax.swing.JButton();
        jBtnArcpers = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTNodos = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMAlumnos = new javax.swing.JMenu();
        ITEMReportes = new javax.swing.JMenuItem();
        jMEncrypt = new javax.swing.JMenu();
        jMDecrypt = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        jMSalir = new javax.swing.JMenuItem();
        jMAlumnos1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Showcard Gothic", 0, 36)); // NOI18N
        jLabel1.setText("ARBOL BINARIO DE BUSQUEDA");

        imgBBT.setBackground(new java.awt.Color(255, 0, 204));
        imgBBT.setForeground(new java.awt.Color(51, 153, 255));
        imgBBT.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(41, 43, 45)), "Arbol Binario", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 12), new java.awt.Color(102, 102, 102))); // NOI18N

        Abrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/cargarA.png"))); // NOI18N
        Abrir.setText("Cargar Archivo");
        Abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirActionPerformed(evt);
            }
        });

        Guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/icons8-guardar-30 (1).png"))); // NOI18N
        Guardar.setText("Guardar Documento");
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });

        inOrdBBT.setText("InOrden");
        inOrdBBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inOrdBBTActionPerformed(evt);
            }
        });

        preOrdBBT.setText("PreOrden");
        preOrdBBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preOrdBBTActionPerformed(evt);
            }
        });

        postBBT.setText("PostOrden");
        postBBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postBBTActionPerformed(evt);
            }
        });

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/buscar.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        BtnIngresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/Ingresar.png"))); // NOI18N
        BtnIngresar.setText("Ingresar");
        BtnIngresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnIngresarActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/eliminar.png"))); // NOI18N
        jButton2.setText("Eliminar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jBtnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/actualizar.png"))); // NOI18N
        jBtnActualizar.setText("Acualizar");
        jBtnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnActualizarActionPerformed(evt);
            }
        });

        jBtnArcpers.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/icons8-agregar-archivo-30.png"))); // NOI18N
        jBtnArcpers.setText("Cargar Arc. Personalizado");
        jBtnArcpers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnArcpersActionPerformed(evt);
            }
        });

        jTNodos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "DPI", "Depa.", "Muni.", "Lugar V.", "No. Dosis", "Dosis 1", "Dosis 2", "Dosis 3"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTNodos);

        jMenuBar1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jMenuBar1.setMinimumSize(new java.awt.Dimension(0, 4));

        jMAlumnos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/menu.png"))); // NOI18N
        jMAlumnos.setText("Menu");
        jMAlumnos.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        ITEMReportes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/abb.png"))); // NOI18N
        ITEMReportes.setText("GENERAR IMAGEN");
        ITEMReportes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ITEMReportesActionPerformed(evt);
            }
        });
        jMAlumnos.add(ITEMReportes);

        jMEncrypt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/icons8-criptografía-externa-criptografía-relleno-suave-relleno-suave-pez-jugoso-17.png"))); // NOI18N
        jMEncrypt.setText("ENCRYPT");
        jMEncrypt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMEncryptMousePressed(evt);
            }
        });
        jMEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMEncryptActionPerformed(evt);
            }
        });
        jMAlumnos.add(jMEncrypt);

        jMDecrypt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/icons8-cryptography-17.png"))); // NOI18N
        jMDecrypt.setText("DECRYPT");
        jMDecrypt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMDecryptMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMDecryptMouseReleased(evt);
            }
        });
        jMDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMDecryptActionPerformed(evt);
            }
        });
        jMAlumnos.add(jMDecrypt);

        jMenuBar1.add(jMAlumnos);

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/cerrar.png"))); // NOI18N
        jMenu1.setText("Cerrar");
        jMenu1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jMSalir.setText("Salir");
        jMSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMSalirActionPerformed(evt);
            }
        });
        jMenu1.add(jMSalir);

        jMenuBar1.add(jMenu1);

        jMAlumnos1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/regresar.png"))); // NOI18N
        jMAlumnos1.setText("Regresar");
        jMAlumnos1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jMenuItem1.setText("Regresar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMAlumnos1.add(jMenuItem1);

        jMenuBar1.add(jMAlumnos1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Abrir)
                        .addGap(64, 64, 64)
                        .addComponent(jBtnArcpers)
                        .addGap(48, 48, 48)
                        .addComponent(Guardar))
                    .addComponent(imgBBT, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BtnIngresar)
                                .addGap(59, 59, 59)
                                .addComponent(btnBuscar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(inOrdBBT)
                                .addGap(154, 154, 154)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(preOrdBBT)
                                .addGap(127, 127, 127))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jBtnActualizar)
                                .addGap(40, 40, 40)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(postBBT)
                            .addComponent(jButton2)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(436, 436, 436))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Abrir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBtnArcpers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(imgBBT, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(postBBT)
                            .addComponent(preOrdBBT)
                            .addComponent(inOrdBBT))
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BtnIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscar)
                            .addComponent(jBtnActualizar)
                            .addComponent(jButton2))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMSalirActionPerformed
        // TODO add your handling code here:
        int confirmado = JOptionPane.showConfirmDialog(null, "Está seguro de Salir");
        if (JOptionPane.OK_OPTION == confirmado) {
            System.exit(0);
        }
    }//GEN-LAST:event_jMSalirActionPerformed

    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
        if (!arbolbb.EstaVacio()) {
            int confirmado = JOptionPane.showConfirmDialog(null, "Está seguro de guardar el arbol");
            if (JOptionPane.OK_OPTION == confirmado) {
                try (BufferedWriter writer = new BufferedWriter(new FileWriter("ArbolBinario.txt"))) {
                    String guardado = arbolbb.guardarPreOrdenTXT(arbolbb.raiz);
                    writer.write(guardado);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "El arbol esta vacio");
        }


    }//GEN-LAST:event_GuardarActionPerformed

    private void AbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirActionPerformed
        JFileChooser escogerArchivo = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Texto (.txt)", "txt");
        escogerArchivo.setFileFilter(filtro);
        int valorRetornado = escogerArchivo.showOpenDialog(null);

        if (valorRetornado == JFileChooser.APPROVE_OPTION) {
            File archivoSeleccionado = escogerArchivo.getSelectedFile();
            String[] options = {"SI", "NO"};
            int option = JOptionPane.showOptionDialog(null, "¿QUIERES CARGAR TODOS LOS DATOS?", "Selección de Ingreso",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
            int cantidad = 0;
            boolean validInput = false;

            // Validación solo números y no texto
            if (option == 1) { // El índice 1 ahora corresponde a "NO"
                while (!validInput) {
                    try {
                        String input = JOptionPane.showInputDialog(null, "¿Cuántos datos quieres cargar?", "Ingreso", JOptionPane.QUESTION_MESSAGE);
                        if (input == null) {
                            return;
                        }
                        cantidad = Integer.parseInt(input);
                        validInput = true;
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(null, "Por favor, ingrese un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }

            try (BufferedReader br = new BufferedReader(new FileReader(archivoSeleccionado))) {
                String linea;
                StringBuilder txtarea = new StringBuilder();
                int contador = 0;
                while ((linea = br.readLine()) != null) {
                    if (option == 1 && contador >= cantidad) {
                        break;
                    }
                    String[] partes = separarDatosArchivo(linea);
                    if (partes != null) {
                        String nombre = partes[0];
                        long dpi = Long.parseLong(partes[1]);
                        // Ingreso como tal
                        arbolbb.AgregarNodo(nombre, dpi); // Solo se agrega nombre y DPI
                        txtarea.append(nombre).append(", ").append(dpi).append("\n");
                        contador++;
                    }
                }
                //   txtRecorridos.setText(txtarea.toString());
                JOptionPane.showMessageDialog(null, "Datos cargados correctamente en el árbol.");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private static String[] separarDatosArchivo(String linea) {
        // Expresión regular para separar el nombre del DPI
        Pattern pattern = Pattern.compile("(.+?)\\s+(\\d+)");
        Matcher matcher = pattern.matcher(linea);
        if (matcher.matches()) {
            String nombre = matcher.group(1).trim();
            String dpi = matcher.group(2).trim();
            return new String[]{nombre, dpi};
        }
        return null;
    }//GEN-LAST:event_AbrirActionPerformed

    private void inOrdBBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inOrdBBTActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTNodos.getModel();
        model.setRowCount(0);

        if (!arbolbb.EstaVacio()) {
            DefaultTableModel modelo = new DefaultTableModel(new String[]{"Nombre", "DPI", "Cantidad de vacunas", "Fecha vacuna 1", "Fecha vacuna 2", "Fecha vacuna 3", "Lugar de Vacunacion", "Departamento Vivienda", "Municipio Vivienda"}, 0);
            jTNodos.setModel(modelo);

            arbolbb.InOrden(arbolbb.raiz, modelo);

        } else {
            JOptionPane.showMessageDialog(null, "El arbol esta vacio");
        }
    }//GEN-LAST:event_inOrdBBTActionPerformed

    private void preOrdBBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preOrdBBTActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTNodos.getModel();
        model.setRowCount(0);

        if (!arbolbb.EstaVacio()) {
            DefaultTableModel modelo = new DefaultTableModel(new String[]{"Nombre", "DPI", "Cantidad de vacunas", "Fecha vacuna 1", "Fecha vacuna 2", "Fecha vacuna 3", "Lugar de Vacunacion", "Departamento Vivienda", "Municipio Vivienda"}, 0);
            jTNodos.setModel(modelo);

            arbolbb.PreOrden(arbolbb.raiz, modelo);

        } else {
            JOptionPane.showMessageDialog(null, "El arbol esta vacio");
        }
    }//GEN-LAST:event_preOrdBBTActionPerformed

    private void postBBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postBBTActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTNodos.getModel();
        model.setRowCount(0);

        if (!arbolbb.EstaVacio()) {
            DefaultTableModel modelo = new DefaultTableModel(new String[]{"Nombre", "DPI", "Cantidad de vacunas", "Fecha vacuna 1", "Fecha vacuna 2", "Fecha vacuna 3", "Lugar de Vacunacion", "Departamento Vivienda", "Municipio Vivienda"}, 0);
            jTNodos.setModel(modelo);

            arbolbb.PostOrden(arbolbb.raiz, modelo);

        } else {
            JOptionPane.showMessageDialog(null, "El arbol esta vacio");
        }
    }//GEN-LAST:event_postBBTActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        try {

            if (!arbolbb.EstaVacio()) {
                long dpi = Long.parseLong(JOptionPane.showInputDialog("Ingrese el DPI del nodo a buscar:"));
                DefaultTableModel model = (DefaultTableModel) jTNodos.getModel();
                model.setRowCount(0);
                DefaultTableModel modelo = new DefaultTableModel(new String[]{"Nombre", "DPI", "Cantidad de vacunas", "Fecha vacuna 1", "Fecha vacuna 2", "Fecha vacuna 3", "Lugar de Vacunacion", "Departamento Vivienda", "Municipio Vivienda"}, 0);
                jTNodos.setModel(modelo);

                boolean encontrado = arbolbb.MostrarNodoBuscado(dpi, modelo);
                if (encontrado) {
                    JOptionPane.showMessageDialog(null, "Nodo encontrado");
                } else {
                    JOptionPane.showMessageDialog(null, "Nodo no encontrado");
                }

            } else {
                JOptionPane.showMessageDialog(null, "El arbol esta vacio");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "DPI a buscar invalido");
        }


    }//GEN-LAST:event_btnBuscarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            long numero;
            if (!arbolbb.EstaVacio()) {
                numero = Long.parseLong(JOptionPane.showInputDialog(null, "Ingresa el Numero de DPI del registro a eliminar", "Eliminando un Nodo", JOptionPane.QUESTION_MESSAGE));
                if (arbolbb.EliminarNodo(numero) == false) {
                    JOptionPane.showMessageDialog(null, "El Nodo a Eliminar no se encuentra en el Arbol", "Nodo no Encontrado", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "El Nodo ha sido eliminado del Arbol", "Nodo Eliminado", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "El Arbol esta vacio", "Error", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Nodo a eliminar invalido");
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void ITEMReportesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ITEMReportesActionPerformed

        String path = "C:\\Users\\VICTUS\\Desktop\\PRUEBA3\\arbl.png";

        // Verifica que la ruta sea correcta
        File file = new File(path);
        if (file.exists()) {
            ImageIcon ic = new ImageIcon(path);
            Image nw = ic.getImage().getScaledInstance(imgBBT.getWidth(), imgBBT.getHeight(), Image.SCALE_SMOOTH); // Use SCALE_SMOOTH for better quality
            ImageIcon nc = new ImageIcon(nw);
            imgBBT.setIcon(nc);
        } else {
            JOptionPane.showMessageDialog(null, "La imagen no existe en la ruta especificada: " + path);
        }
    }//GEN-LAST:event_ITEMReportesActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void BtnIngresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnIngresarActionPerformed
        AgregarDatos ag = new AgregarDatos();
        ag.setVisible(true);
    }//GEN-LAST:event_BtnIngresarActionPerformed

    private static String[] separarDatosArchivoPersonalizado(String linea) {
        // Expresión regular para separar los datos
        Pattern pattern = Pattern.compile("(.+?)\\|([0-9]+)\\|(.+?)\\|(.+?)\\|(.+?)\\|([0-9]+)\\|(.+?)\\|(.+?)\\|(.+)");
        Matcher matcher = pattern.matcher(linea);
        if (matcher.matches()) {
            String[] datos = new String[9];
            for (int i = 0; i < 9; i++) {
                datos[i] = matcher.group(i + 1).trim();
            }
            return datos;
        }
        return null;
    }

    private void jBtnArcpersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnArcpersActionPerformed
        JFileChooser escogerArchivo = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Texto (.txt)", "txt");
        escogerArchivo.setFileFilter(filtro);
        int valorRetornado = escogerArchivo.showOpenDialog(null);

        if (valorRetornado == JFileChooser.APPROVE_OPTION) {
            File archivoSeleccionado = escogerArchivo.getSelectedFile();
            String[] options = {"SI", "NO"};
            int option = JOptionPane.showOptionDialog(null, "¿QUIERES CARGAR TODOS LOS DATOS?", "Selección de Ingreso",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
            int cantidad = 0;
            boolean validInput = false;

            // Validación solo números y no texto
            if (option == 1) { // El índice 1 ahora corresponde a "NO"
                while (!validInput) {
                    try {
                        String input = JOptionPane.showInputDialog(null, "¿Cuántos datos quieres cargar?", "Ingreso", JOptionPane.QUESTION_MESSAGE);
                        if (input == null) {
                            return;
                        }
                        cantidad = Integer.parseInt(input);
                        validInput = true;
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(null, "Por favor, ingrese un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }

            try (BufferedReader br = new BufferedReader(new FileReader(archivoSeleccionado))) {
                String linea;
                int contador = 0;
                while ((linea = br.readLine()) != null) {
                    if (option == 1 && contador >= cantidad) {
                        break;
                    }
                    String[] partes = separarDatosArchivoPersonalizado(linea);
                    if (partes != null) {
                        String nombre = partes[0];
                        long dpi = Long.parseLong(partes[1]);
                        String departamento = partes[2];
                        String municipio = partes[3];
                        String lugarVacunacion = partes[4];
                        int cantidadDosis = Integer.parseInt(partes[5]);
                        String fechaVacuna1 = partes[6];
                        String fechaVacuna2 = partes[7];
                        String fechaVacuna3 = partes[8];

                        arbolbb.AgregarNodo(nombre, dpi);
                        arbolbb.actualizarDatos(dpi, nombre, departamento, municipio, lugarVacunacion, cantidadDosis, fechaVacuna1, fechaVacuna2, fechaVacuna3);

                        contador++;
                    }
                }
                JOptionPane.showMessageDialog(null, "Datos cargados correctamente en el árbol.");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jBtnArcpersActionPerformed

    private void jBtnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnActualizarActionPerformed
        BuscarDatos ag = new BuscarDatos();
        ag.setVisible(true);
    }//GEN-LAST:event_jBtnActualizarActionPerformed

    private void jMEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMEncryptActionPerformed

    }//GEN-LAST:event_jMEncryptActionPerformed

    private void jMDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMDecryptActionPerformed

    }//GEN-LAST:event_jMDecryptActionPerformed

    private void jMEncryptMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMEncryptMousePressed
        if (!arbolbb.EstaVacio()) {
            int opcion = JOptionPane.showConfirmDialog(null, "Se ecriptaran los datos", "Confirmar", JOptionPane.YES_NO_OPTION);
            if (opcion == JOptionPane.YES_OPTION) {
                arbolbb.encryptRegistro(arbolbb.raiz, 5);
                JOptionPane.showMessageDialog(null, "Proceso Completado");

            }
        } else {
            JOptionPane.showMessageDialog(null, "El arbol esta vacio");
        }

    }//GEN-LAST:event_jMEncryptMousePressed

    private void jMDecryptMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMDecryptMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jMDecryptMouseReleased

    private void jMDecryptMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMDecryptMousePressed
        if (!arbolbb.EstaVacio()) {
            int opcion = JOptionPane.showConfirmDialog(null, "Se decriptaran los datos", "Confirmar", JOptionPane.YES_NO_OPTION);
            if (opcion == JOptionPane.YES_OPTION) {
                arbolbb.decryptRegistro(arbolbb.raiz, 5);
                JOptionPane.showMessageDialog(null, "Proceso Completado");

            }
        } else {
            JOptionPane.showMessageDialog(null, "El arbol esta vacio");
        }

    }//GEN-LAST:event_jMDecryptMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArbolBinario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArbolBinario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArbolBinario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArbolBinario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ArbolBusqueda().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Abrir;
    private javax.swing.JButton BtnIngresar;
    private javax.swing.JButton Guardar;
    private javax.swing.JMenuItem ITEMReportes;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JLabel imgBBT;
    private javax.swing.JButton inOrdBBT;
    private javax.swing.JButton jBtnActualizar;
    private javax.swing.JButton jBtnArcpers;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMAlumnos;
    private javax.swing.JMenu jMAlumnos1;
    private javax.swing.JMenu jMDecrypt;
    private javax.swing.JMenu jMEncrypt;
    private javax.swing.JMenuItem jMSalir;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTNodos;
    private javax.swing.JButton postBBT;
    private javax.swing.JButton preOrdBBT;
    // End of variables declaration//GEN-END:variables
}
